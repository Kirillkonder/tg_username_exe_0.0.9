import requests
import concurrent.futures
import time
import random
import re
from typing import Dict, List

class FragmentParser:
    def __init__(self):
        self.base_url = "https://fragment.com"
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        ]
        self.session = requests.Session()
        self.update_headers()
        self.request_count = 0

    def update_headers(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–æ–≤—ã–º User-Agent"""
        self.headers = {
            'User-Agent': random.choice(self.user_agents),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
        }
        self.session.headers.update(self.headers)

    def check_username_status(self, username: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ Fragment –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É"""
        url = f"{self.base_url}/username/{username}"
        
        # –ú–µ–Ω—è–µ–º User-Agent –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
        if self.request_count % 10 == 0:
            self.update_headers()
        
        try:
            start_time = time.time()
            
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 0.5 –¥–æ 1.5 —Å–µ–∫—É–Ω–¥
            time.sleep(random.uniform(0.5, 1.5))
            
            response = self.session.get(url, headers=self.headers, timeout=8)
            self.request_count += 1
            
            request_time = time.time() - start_time
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Fragment
            price = self.estimate_price(username)
            
            if response.status_code == 200:
                html = response.text
                
                # –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
                if 'Unavailable' in html:
                    status = 'Available'
                    reason = '–°–≤–æ–±–æ–¥–µ–Ω'
                    available = True
                    print(f"   ‚úÖ {username} - –°–í–û–ë–û–î–ï–ù ({request_time:.1f}s) üí∞ {price}")
                else:
                    status = 'Taken'
                    reason = '–ó–∞–Ω—è—Ç'
                    available = False
                    print(f"   ‚ùå {username} - –ó–ê–ù–Ø–¢ ({request_time:.1f}s) üí∞ {price}")
                
                result = {
                    'username': username,
                    'status': status,
                    'reason': reason,
                    'available': available,
                    'url': url,
                    'response_time': round(request_time, 2),
                    'price': price,
                    'success': True
                }
                
                return result
                
            elif response.status_code == 404:
                # 404 –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —é–∑–µ—Ä–Ω–µ–π–º —Å–≤–æ–±–æ–¥–µ–Ω
                result = {
                    'username': username,
                    'status': 'Available',
                    'reason': '–°–≤–æ–±–æ–¥–µ–Ω (404)',
                    'available': True,
                    'url': url,
                    'response_time': round(request_time, 2),
                    'price': price,
                    'success': True
                }
                print(f"   ‚úÖ {username} - –°–í–û–ë–û–î–ï–ù (404) ({request_time:.1f}s) üí∞ {price}")
                return result
                
            else:
                result = {
                    'username': username,
                    'status': f'HTTP {response.status_code}',
                    'reason': f'–û—à–∏–±–∫–∞ HTTP: {response.status_code}',
                    'available': False,
                    'url': url,
                    'response_time': round(request_time, 2),
                    'price': price,
                    'success': False
                }
                print(f"   ‚ùå {username} - –û—à–∏–±–∫–∞ HTTP {response.status_code} ({request_time:.1f}s)")
                return result
                
        except requests.exceptions.Timeout:
            result = {
                'username': username,
                'status': 'Timeout',
                'reason': '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞',
                'available': False,
                'url': url,
                'response_time': 0,
                'price': 'N/A',
                'success': False
            }
            print(f"   ‚ö†Ô∏è {username} - –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return result
            
        except requests.exceptions.ConnectionError:
            result = {
                'username': username,
                'status': 'ConnectionError',
                'reason': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
                'available': False,
                'url': url,
                'response_time': 0,
                'price': 'N/A',
                'success': False
            }
            print(f"   ‚ö†Ô∏è {username} - –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return result
            
        except Exception as e:
            result = {
                'username': username,
                'status': f'Error: {type(e).__name__}',
                'reason': f'–û—à–∏–±–∫–∞: {str(e)}',
                'available': False,
                'url': url,
                'response_time': 0,
                'price': 'N/A',
                'success': False
            }
            print(f"   ‚ö†Ô∏è {username} - –û—à–∏–±–∫–∞: {type(e).__name__}")
            return result

    def estimate_price(self, username: str) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω Fragment"""
        length = len(username)
        
        # –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã —Å Fragment (–Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        if length == 3:
            return "$10,000-50,000"  # 3-char –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ
        elif length == 4:
            return "$5,000-20,000"   # 4-char premium
        elif length == 5:
            return "$1,000-5,000"    # 5-char quality
        elif length == 6:
            return "$500-2,000"      # 6-char good
        elif length == 7:
            return "$200-1,000"      # 7-char standard
        elif length == 8:
            return "$100-500"        # 8-char average
        elif length >= 9:
            return "$50-200"         # 9+ char basic
        else:
            return "$100-500"        # default

    def check_usernames_batch(self, usernames: List[str], max_workers: int = 10) -> List[Dict]:
        """–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤"""
        start_time = time.time()
        results = []
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(usernames)} —é–∑–µ—Ä–Ω–µ–π–º–æ–≤:")
        print("‚îÄ" * 60)
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            future_to_username = {
                executor.submit(self.check_username_status, username): username 
                for username in usernames
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            completed = 0
            for future in concurrent.futures.as_completed(future_to_username):
                username = future_to_username[future]
                try:
                    result = future.result()
                    results.append(result)
                    completed += 1
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å
                    if completed % 5 == 0:
                        elapsed = time.time() - start_time
                        speed = completed / (elapsed / 60)
                        percent = (completed / len(usernames)) * 100
                        print(f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{len(usernames)} ({percent:.0f}%) | –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.0f}/–º–∏–Ω")
                        
                except Exception as e:
                    error_result = {
                        'username': username,
                        'status': f'Future Error: {type(e).__name__}',
                        'reason': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}',
                        'available': False,
                        'url': f"{self.base_url}/username/{username}",
                        'response_time': 0,
                        'price': 'N/A',
                        'success': False
                    }
                    results.append(error_result)
                    print(f"   ‚ö†Ô∏è {username} - –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {type(e).__name__}")
                    completed += 1
        
        total_time = time.time() - start_time
        usernames_per_minute = len(usernames) / (total_time / 60)
        
        print("‚îÄ" * 60)
        print(f"‚è±Ô∏è  –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(usernames)} —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –∑–∞ {total_time:.1f} —Å–µ–∫")
        print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {usernames_per_minute:.0f} —é–∑–µ—Ä–Ω–µ–π–º–æ–≤/–º–∏–Ω")
        
        return results